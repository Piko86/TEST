const { cmd } = require("../command");
const QRCode = require("qrcode");

/**
 * QR Code generator command for WhatsApp bot
 *
 * Usage examples:
 *   .qrcode Hello world
 *   .qrcode https://example.com
 *   .qrcode John Doe, +1234567890, john@example.com      (auto-detects vCard if comma-separated contact)
 *   .qrcode My text | 512          (pipe to set width in pixels; default 300)
 *   .qrcode vcard:BEGIN:VCARD...   (supply full vCard payload)
 *
 * Behavior:
 * - Accepts a text/URL/string and converts it into a PNG QR image.
 * - If the input looks like a contact (comma-separated name,phone,email) it'll build a vCard automatically.
 * - Optional: after a pipe (|) you can specify desired image width in px (e.g. `| 512`).
 * - Sends the QR as an image (and also as document fallback).
 *
 * Dependency: npm i qrcode
 */

cmd(
  {
    pattern: "qrcode",
    react: "üî≥",
    desc: "Generate a QR code from text, URL or contact",
    category: "utility",
    filename: __filename,
  },
  async (robin, mek, m, { from, q, reply }) => {
    try {
      if (!q) return reply("*Provide text, URL or contact to generate QR.* Example: .qrcode Hello world");

      // Split by '|' to allow optional size param: "text | 512"
      const parts = q.split("|").map((p) => p.trim());
      let payload = parts[0];
      const requestedSize = parts[1] ? parseInt(parts[1], 10) : NaN;
      const width = Number.isFinite(requestedSize) && requestedSize > 50 ? requestedSize : 300;

      // Helper: detect simple contact pattern "Name, phone, email"
      const looksLikeContact = (txt) => {
        const segments = txt.split(",").map((s) => s.trim()).filter(Boolean);
        // require at least name+phone
        return segments.length >= 2 && /[0-9]{5,}/.test(segments[1]);
      };

      // If user gave a simple contact, convert to a vCard
      if (payload.toLowerCase().startsWith("vcard:")) {
        payload = payload.slice(6).trim(); // allow "vcard:BEGIN:VCARD..."
      } else if (looksLikeContact(payload)) {
        const seg = payload.split(",").map((s) => s.trim());
        const name = seg[0] || "";
        const phone = seg[1] || "";
        const email = seg[2] || "";
        const vcardLines = [
          "BEGIN:VCARD",
          "VERSION:3.0",
          `FN:${name}`,
          phone ? `TEL;TYPE=CELL:${phone}` : "",
          email ? `EMAIL:${email}` : "",
          "END:VCARD",
        ].filter(Boolean);
        payload = vcardLines.join("\n");
      }

      // Prepare QR options
      const qrOptions = {
        errorCorrectionLevel: "H", // high reliability
        type: "image/png",
        width,
        margin: 2,
        color: {
          dark: "#000000",
          light: "#FFFFFF",
        },
      };

      await robin.sendMessage(from, { text: `üîé Generating QR for:\n${payload.length > 200 ? payload.slice(0, 200) + "..." : payload}\n\n‚è≥ Please wait...` }, { quoted: mek });

      // Generate buffer
      const buffer = await QRCode.toBuffer(payload, qrOptions);

      // Send as image (caption includes instructions)
      const caption = `üî≥ QR code generated (${width}px)\n‚Ä¢ Tip: Scan to import contact or open the link.\n\nGenerated by P_I_K_O`;
      await robin.sendMessage(
        from,
        { image: buffer, caption },
        { quoted: mek }
      );

      // Also send as document for easy download / saving
      await robin.sendMessage(
        from,
        {
          document: buffer,
          mimetype: "image/png",
          fileName: `qrcode-${Date.now()}.png`,
          caption: `üìÅ QR file (${width}px)`,
        },
        { quoted: mek }
      );

    } catch (e) {
      console.error("qrcode command error:", e);
      reply(`‚ùå Error generating QR: ${e.message || "Unknown error"}`);
    }
  }
);